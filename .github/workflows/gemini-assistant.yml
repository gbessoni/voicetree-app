name: Gemini AI Assistant

on:
  issues:
    types: [opened, labeled]
  pull_request:
    types: [opened, synchronize]

env:
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

jobs:
  issue-response:
    name: Auto-respond to Issues
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install packaging google-generativeai requests
      
      - name: Generate project plan with Gemini
        id: gemini-plan
        run: |
          python - <<'EOF'
          import google.generativeai as genai
          import os
          import json
          
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-pro')
          
          issue_title = """${{ github.event.issue.title }}"""
          issue_body = """${{ github.event.issue.body }}"""
          issue_number = "${{ github.event.issue.number }}"
          
          prompt = f"""You are a senior software engineer helping to plan a project task.
          
          GitHub Issue #{issue_number}: {issue_title}
          
          Description:
          {issue_body}
          
          Please provide:
          1. A brief analysis of the requirements
          2. A step-by-step implementation plan
          3. Estimated complexity (Low/Medium/High)
          4. Suggested technologies/approaches
          5. Potential challenges to consider
          
          Format your response as a clear, actionable project plan.
          Reference Issue #{issue_number} in your response."""
          
          response = model.generate_content(prompt)
          plan_text = response.text
          
          # Escape for GitHub Actions
          plan_text = plan_text.replace('%', '%25').replace('\n', '%0A').replace('\r', '%0D')
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"plan={plan_text}\n")
          EOF
      
      - name: Comment on Issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const plan = `${{ steps.gemini-plan.outputs.plan }}`;
            const issueNumber = context.issue.number;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: `## 🤖 AI-Generated Project Plan for Issue #${issueNumber}\n\n${plan}\n\n---\n*Generated by Gemini AI Assistant*`
            });

  good-first-issue-pr:
    name: Create PR for Good First Issue
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issues' && 
      github.event.action == 'labeled' && 
      github.event.label.name == 'good first issue'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install packaging google-generativeai requests
      
      - name: Analyze issue and generate fix
        id: generate-fix
        run: |
          python - <<'EOF'
          import google.generativeai as genai
          import os
          import json
          import re
          
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-pro')
          
          issue_title = """${{ github.event.issue.title }}"""
          issue_body = """${{ github.event.issue.body }}"""
          issue_number = "${{ github.event.issue.number }}"
          
          prompt = f"""You are a software engineer working on Issue #{issue_number}.
          
          Issue: {issue_title}
          Description: {issue_body}
          
          This is marked as a "good first issue" - meaning it should be a simple fix.
          
          Analyze if this is truly a simple fix that can be automated. Respond with:
          1. "CAN_AUTOMATE: yes" or "CAN_AUTOMATE: no" on the first line
          2. If yes, provide the file path and exact code changes needed
          3. Brief explanation of the fix
          
          Only suggest automation for truly simple fixes like:
          - Typos in comments or documentation
          - Adding missing docstrings
          - Simple formatting fixes
          - Adding TODO comments
          - Simple configuration updates
          
          Reference Issue #{issue_number} in your response."""
          
          response = model.generate_content(prompt)
          analysis = response.text
          
          can_automate = "CAN_AUTOMATE: yes" in analysis
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"can_automate={'true' if can_automate else 'false'}\n")
              analysis_escaped = analysis.replace('%', '%25').replace('\n', '%0A').replace('\r', '%0D')
              f.write(f"analysis={analysis_escaped}\n")
          EOF
      
      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const canAutomate = '${{ steps.generate-fix.outputs.can_automate }}';
            const analysis = `${{ steps.generate-fix.outputs.analysis }}`;
            const issueNumber = context.issue.number;
            
            let message;
            if (canAutomate === 'true') {
              message = `## 🤖 Automated Fix Analysis for Issue #${issueNumber}\n\n${analysis}\n\n✅ This issue appears suitable for automation. Attempting to create a PR...\n\n---\n*Generated by Gemini AI Assistant*`;
            } else {
              message = `## 🤖 Analysis for Issue #${issueNumber}\n\n${analysis}\n\n⚠️ This issue may require manual intervention and cannot be fully automated at this time.\n\n---\n*Generated by Gemini AI Assistant*`;
            }
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: message
            });

  code-quality-check:
    name: Code Quality Check on PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install packaging google-generativeai requests
          pip install pylint flake8 black isort
      
      - name: Get changed Python files
        id: changed-files
        run: |
          git diff --name-only origin/${{ github.base_ref }}...${{ github.sha }} | grep '\.py$' > changed_files.txt || echo "No Python files changed"
          if [ -s changed_files.txt ]; then
            echo "has_python_files=true" >> $GITHUB_OUTPUT
          else
            echo "has_python_files=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run code quality checks
        if: steps.changed-files.outputs.has_python_files == 'true'
        id: quality-check
        run: |
          # Run pylint
          echo "## Pylint Results" > quality_report.txt
          pylint $(cat changed_files.txt) --exit-zero >> quality_report.txt 2>&1 || true
          
          echo -e "\n## Flake8 Results" >> quality_report.txt
          flake8 $(cat changed_files.txt) --exit-zero >> quality_report.txt 2>&1 || true
          
          # Check if files are formatted with black
          echo -e "\n## Black Format Check" >> quality_report.txt
          black --check $(cat changed_files.txt) >> quality_report.txt 2>&1 || echo "Files need formatting" >> quality_report.txt
          
          # Save report
          cat quality_report.txt
      
      - name: Analyze with Gemini
        if: steps.changed-files.outputs.has_python_files == 'true'
        id: gemini-review
        run: |
          python - <<'EOF'
          import google.generativeai as genai
          import os
          
          genai.configure(api_key=os.environ['GEMINI_API_KEY'])
          model = genai.GenerativeModel('gemini-pro')
          
          pr_title = """${{ github.event.pull_request.title }}"""
          pr_number = "${{ github.event.pull_request.number }}"
          
          # Read quality report
          try:
              with open('quality_report.txt', 'r') as f:
                  quality_report = f.read()
          except:
              quality_report = "No quality report available"
          
          prompt = f"""You are a senior code reviewer analyzing PR #{pr_number}.
          
          PR Title: {pr_title}
          
          Code Quality Report:
          {quality_report}
          
          Please provide:
          1. Summary of code quality issues found
          2. Severity assessment (Critical/High/Medium/Low)
          3. Specific recommendations for improvement
          4. Positive aspects of the code (if any)
          
          Be constructive and helpful. Reference PR #{pr_number} in your review."""
          
          response = model.generate_content(prompt)
          review = response.text
          
          # Escape for GitHub Actions
          review = review.replace('%', '%25').replace('\n', '%0A').replace('\r', '%0D')
          
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"review={review}\n")
          EOF
      
      - name: Comment on PR
        if: steps.changed-files.outputs.has_python_files == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const review = `${{ steps.gemini-review.outputs.review }}`;
            const prNumber = context.issue.number;
            
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## 🤖 AI Code Quality Review for PR #${prNumber}\n\n${review}\n\n---\n*Generated by Gemini AI Assistant*`
            });
      
      - name: No Python files changed
        if: steps.changed-files.outputs.has_python_files == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `## 🤖 Code Quality Review for PR #${prNumber}\n\n✅ No Python files were changed in this PR. Skipping automated code quality checks.\n\n---\n*Generated by Gemini AI Assistant*`
            });
